# -*- mode: ruby -*-
# vi: set ft=ruby :


Vagrant.configure("2") do |config|

  # Image 
  config.vm.box = "generic/ubuntu2004"
  
  # host-only network IP
  config.vm.network "private_network", ip: "192.168.56.100"

  # setup VM RAM and CPU
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "4096"
    vb.cpus = 2
  end

  # ssh -i id_rsa root@192.168.56.100 to login 
  config.vm.provision "shell" do |s|
    ssh_pub_key = File.readlines("./id_rsa.pub").first.strip
    s.inline = <<-SHELL
      mkdir -p /root/.ssh
      echo "#{ssh_pub_key}" > /root/.ssh/id_rsa.pub
      echo "#{ssh_pub_key}" > /root/.ssh/authorized_keys
    SHELL
  end

  # Use NCHC Mirror
  config.vm.provision "shell", inline: <<-SHELL

    sed -i '/^DNS/c\DNS=8.8.8.8' /etc/systemd/resolved.conf
    systemctl restart systemd-resolved.service

    # change repoisitory mirror
    sed -i 's/us.archive.ubuntu.com/free.nchc.org.tw/g' /etc/apt/sources.list
    sed -i 's/security.ubuntu.com/free.nchc.org.tw/g' /etc/apt/sources.list
    sudo apt-get update
  SHELL

  # Install Docker
  # https://docs.docker.com/engine/install/ubuntu/
  config.vm.provision "shell", inline: <<-SHELL
    for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done

    # Add Docker's official GPG key:
    sudo apt-get install ca-certificates curl gnupg
    sudo install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    sudo chmod a+r /etc/apt/keyrings/docker.gpg

    # Add the repository to Apt sources:
    echo \
      "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update

    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

  SHELL

  # Install KinD and create cluster
  # https://kind.sigs.k8s.io/docs/user/quick-start/#installation
  config.vm.provision "shell", inline: <<-SHELL
    # Install KinD
    [ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
    chmod +x ./kind
    sudo mv ./kind /usr/local/bin/kind

    # Crate a cluster
    kind create cluster
  SHELL

  # Install Kubectl 
  # https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/
  config.vm.provision "shell", inline: <<-SHELL
    wget -qO /usr/local/bin/kubectl https://dl.k8s.io/release/v1.24.7/bin/linux/amd64/kubectl && \
    chmod +x /usr/local/bin/kubectl
  SHELL

  # Install Go
  # https://go.dev/doc/install
  config.vm.provision "shell", inline: <<-SHELL
    apt install make
    wget -qO /tmp/go.tar.gz https://golang.org/dl/go1.20.1.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf /tmp/go.tar.gz && rm /tmp/go.tar.gz
    echo "PATH=$PATH:/usr/local/go/bin:/root/go/bin" >> /root/.bashrc
    
    export PATH=$PATH:/usr/local/go/bin
    go install golang.org/x/tools/gopls@latest
  SHELL

  # Get latest example from github
  config.vm.provision "shell", inline: <<-SHELL
    echo "clone from github"
    # git clone 
  SHELL  

end
